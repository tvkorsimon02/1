@model Order
@{
    ViewData["Title"] = "Chi tiết đơn hàng";
    Layout = "~/Views/Shared/_Layout_NoSidebar.cshtml";
    string[] statusOptions = {
        "Không xác định", "Chưa duyệt", "Đã duyệt", "Đang giao", "Đã giao", "Đã nhận", "Đã huỷ"
    };
}

<!-- Toast Notification -->
@if (TempData["Message"] != null)
{
    <div id="toastMessage" class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1055;">
        <div class="toast align-items-center text-white bg-custom-primary border-0 show shadow-lg" role="alert">
            <div class="d-flex">
                <div class="toast-body fw-semibold">
                    <i class="bi bi-info-circle-fill me-2"></i>
                    @TempData["Message"]
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto"
                        data-bs-dismiss="toast" aria-label="Đóng"></button>
            </div>
        </div>
    </div>
}

<div class="container-fluid py-4">
    <!-- Header Section -->
    <div class="row mb-5">
        <div class="col-12">
            <div class="d-flex align-items-center justify-content-between flex-wrap">
                <div class="d-flex align-items-center mb-3 mb-sm-0">
                    <div class="bg-custom-primary bg-gradient rounded-circle d-flex align-items-center justify-content-center me-3"
                         style="width: 60px; height: 60px;">
                        <i class="bi bi-receipt text-white" style="font-size: 1.5rem;"></i>
                    </div>
                    <div>
                        <h2 class="fw-bold text-custom-primary mb-1">Chi tiết đơn hàng</h2>
                        <p class="text-muted mb-0">Thông tin chi tiết về đơn hàng #@Model.Id</p>
                    </div>
                </div>
                <div class="text-end">
                    <div class="badge bg-custom-primary fs-6 px-3 py-2 order-info-badge">
                        <i class="bi bi-calendar me-1"></i>
                        Ngày tạo: @Model.Created_Date.ToString("dd/MM/yyyy HH:mm")
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Order Summary and Status Update -->
    <div class="row mb-4">
        <div class="col-lg-6 mb-4 mb-lg-0">
            <div class="card shadow-sm border-0 h-100">
                <div class="card-header bg-light border-0 py-3">
                    <h6 class="mb-0 text-custom-primary fw-semibold">
                        <i class="bi bi-info-circle me-2"></i>
                        Thông tin đơn hàng
                    </h6>
                </div>
                <div class="card-body">
                    <p class="mb-2"><strong class="text-custom-primary">Mã đơn:</strong> #@Model.Id</p>
                    <p class="mb-2"><strong class="text-custom-primary">Khách hàng:</strong> @Model.Username</p>
                    <p class="mb-2"><strong class="text-custom-primary">Tổng tiền:</strong> <span class="text-danger fw-bold">@string.Format("{0:N0}", Model.OrderDetails.Sum(d => d.Quantity * d.Price)) VNĐ</span></p>
                    <p class="mb-0">
                        <strong class="text-custom-primary">Trạng thái hiện tại:</strong>
                        @{
                            string statusBadgeClass = "";
                            switch (Model.Status)
                            {
                                case 1: statusBadgeClass = "bg-warning text-dark"; break; // Chưa duyệt
                                case 2: statusBadgeClass = "bg-info"; break; // Đã duyệt
                                case 3: statusBadgeClass = "bg-primary"; break; // Đang giao
                                case 4: statusBadgeClass = "bg-success"; break; // Đã giao
                                case 5: statusBadgeClass = "bg-success"; break; // Đã nhận
                                case 6: statusBadgeClass = "bg-danger"; break; // Đã huỷ
                                default: statusBadgeClass = "bg-secondary"; break;
                            }
                        }
                        <span class="badge @statusBadgeClass status-badge-lg">@statusOptions[Model.Status]</span>
                    </p>
                </div>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="card shadow-sm border-0 h-100">
                <div class="card-header bg-light border-0 py-3">
                    <h6 class="mb-0 text-custom-primary fw-semibold">
                        <i class="bi bi-arrow-repeat me-2"></i>
                        Cập nhật trạng thái
                    </h6>
                </div>
                <div class="card-body d-flex flex-column justify-content-between">
                    <form method="post" asp-action="UpdateStatus" asp-controller="Admin">
                        <input type="hidden" name="id" value="@Model.Id" />
                        <div class="mb-3">
                            <label for="statusSelect" class="form-label fw-semibold text-custom-primary">Chọn trạng thái mới:</label>
                            <select name="status" id="statusSelect" class="form-select form-select-lg">
                                @{
                                    var currentStatus = Model.Status;
                                }
                                @for (int i = 1; i < statusOptions.Length; i++)
                                {
                                    <option value="@i" selected="@(currentStatus == i)">@i. @statusOptions[i]</option>
                                }
                            </select>
                        </div>
                        <button type="submit" class="btn btn-custom-primary btn-lg w-100">
                            <i class="bi bi-arrow-clockwise me-2"></i> Cập nhật trạng thái
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Product Details Table -->
    <div class="row">
        <div class="col-12">
            <div class="card shadow-sm border-0 order-items-card">
                <div class="card-header bg-light border-0 py-3">
                    <h6 class="mb-0 text-custom-primary fw-semibold">
                        <i class="bi bi-box-seam me-2"></i>
                        Chi tiết sản phẩm trong đơn hàng
                    </h6>
                </div>
                <div class="card-body p-0">
                    @if (Model.OrderDetails != null && Model.OrderDetails.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover align-middle mb-0 order-products-table">
                                <thead class="table-light">
                                    <tr>
                                        <th>Sản phẩm</th>
                                        <th class="text-end" style="width: 150px;">Giá</th>
                                        <th class="text-center" style="width: 100px;">Số lượng</th>
                                        <th class="text-end" style="width: 150px;">Thành tiền</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var d in Model.OrderDetails)
                                    {
                                        var product = d.ProductNav;       // có thể null nếu sau này xóa cứng (nên tránh)
                                        <tr>
                                            <td class="align-middle">
                                                <div class="d-flex align-items-center gap-2">
                                                    <img src="@(string.IsNullOrEmpty(product?.ImageUrl)
                             ? "/placeholder.svg?height=40&width=40"
                             : Url.Content("~/uploads/" + product!.ImageUrl))"
                                                         style="width:40px;height:40px;object-fit:cover" class="rounded" />

                                                    <div>
                                                        <div class="fw-semibold">
                                                            @(product?.Name ?? $"(SP #{d.Product})")
                                                        </div>

                                                        @* Nếu đã ẩn khỏi cửa hàng, vẫn hiển thị và gắn nhãn *@
                                                        @if (product != null && !product.Active)
                                                        {
                                                            <span class="badge bg-secondary-subtle text-secondary border">
                                                                Sản phẩm hiện đang ẩn khỏi cửa hàng
                                                            </span>
                                                        }
                                                    </div>
                                                </div>
                                            </td>

                                            <td class="text-center">@d.Quantity</td>
                                            <td class="text-end">@string.Format("{0:N0}", d.Price) VNĐ</td>
                                            <td class="text-end fw-semibold">
                                                @string.Format("{0:N0}", d.Price * d.Quantity) VNĐ
                                            </td>
                                        </tr>
                                    }

                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="py-4 text-center text-muted">
                            <i class="bi bi-info-circle text-custom-primary mb-3" style="font-size: 2rem;"></i>
                            <h5 class="text-custom-primary fw-semibold">Không có sản phẩm nào trong đơn hàng này.</h5>
                            <p class="text-muted mb-0">Chi tiết sản phẩm không khả dụng.</p>
                        </div>
                    }
                </div>
                <div class="card-footer d-flex justify-content-end py-3 bg-light border-0">
                    <h4 class="mb-0 text-custom-primary fw-bold">
                        Tổng tiền đơn hàng: @string.Format("{0:N0}", Model.OrderDetails.Sum(d => d.Quantity * d.Price)) VNĐ
                    </h4>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    /* Custom Primary Color Variables */
    :root {
        --custom-primary: #212529;
        --custom-primary-hover: #1a1e21;
        --custom-primary-light: rgba(33, 37, 41, 0.1);
        --custom-primary-shadow: rgba(33, 37, 41, 0.15);
        --gradient-primary: linear-gradient(135deg, #212529 0%, #343a40 100%);
    }

    /* Custom Primary Color Classes */
    .text-custom-primary {
        color: var(--custom-primary) !important;
    }

    .bg-custom-primary {
        background-color: var(--custom-primary) !important;
    }

    .badge.bg-custom-primary {
        background-color: var(--custom-primary) !important;
        color: white;
    }

    /* Header Styling */
    .bg-gradient {
        background: var(--gradient-primary) !important;
    }

    /* Card Styling */
    .card {
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        border: 1px solid rgba(0,0,0,0.05);
    }

        .card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 20px rgba(0,0,0,0.1) !important;
        }

    /* Toast Styling */
    .toast.bg-custom-primary {
        background: var(--gradient-primary) !important;
        border-radius: 0.5rem;
    }

    /* Badge Styling */
    .badge {
        font-size: 0.75rem;
        font-weight: 500;
        border-radius: 0.375rem;
        padding: 0.25rem 0.5rem;
    }

    /* Header Badge */
    .order-info-badge {
        font-size: 0.9rem !important;
        padding: 0.5rem 1rem;
        border-radius: 0.5rem;
        background: var(--gradient-primary) !important;
        box-shadow: 0 2px 8px var(--custom-primary-shadow);
    }

    /* Card Headers */
    .card-header {
        border-bottom: 1px solid rgba(0,0,0,0.05);
    }

        .card-header h6 {
            font-size: 0.95rem;
            letter-spacing: 0.025em;
        }

    /* Table Styling */
    .order-products-table thead th {
        font-weight: 600;
        color: var(--custom-primary);
        border-bottom: 2px solid var(--custom-primary-light);
    }

    .order-products-table tbody td {
        padding: 1rem 0.75rem;
        vertical-align: middle;
    }

    .order-products-table tbody tr:last-child td {
        border-bottom: none;
    }

    /* Status Badge in Summary */
    .status-badge-lg {
        font-size: 0.9rem;
        padding: 0.4em 0.8em;
        border-radius: 0.5rem;
        font-weight: 600;
    }

    /* Select and Button Styling */
    .form-select-lg {
        padding: 0.75rem 1.25rem;
        font-size: 1rem;
        border-radius: 0.5rem;
        border-color: rgba(0,0,0,0.1);
        transition: all 0.3s ease;
    }

        .form-select-lg:focus {
            border-color: var(--custom-primary);
            box-shadow: 0 0 0 0.25rem var(--custom-primary-light);
        }

    .btn-custom-primary {
        background: var(--gradient-primary);
        border: none;
        color: white;
        transition: all 0.3s ease;
        font-weight: 500;
        box-shadow: 0 4px 12px var(--custom-primary-shadow);
    }

        .btn-custom-primary:hover {
            background: linear-gradient(135deg, var(--custom-primary-hover) 0%, #16191d 100%);
            transform: translateY(-2px);
            box-shadow: 0 6px 18px var(--custom-primary-shadow);
            color: white;
        }
</style>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const toastEl = document.querySelector('.toast');
            if (toastEl) {
                const toast = new bootstrap.Toast(toastEl, {
                    delay: 5000,
                    animation: true
                });
                toast.show();
            }
        });
    </script>
}